#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const https = require("https");
const fs = require('fs')

const systemData = require('../modules/systemData');
const Tap = require('../modules/Tap');

const options = {
  
  key: fs.readFileSync('C:\\Users\\root\\Desktop\\Security Engineering\\app\\myapp\\keys\\localhost.key', 'utf8'),
  cert: fs.readFileSync('C:\\Users\\root\\Desktop\\Security Engineering\\app\\myapp\\keys\\localhost.crt', 'utf8'),
};



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '31337');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(options, app);


var io = require('socket.io').listen(server, {
  secure: true
})

let sharedsession = require("express-socket.io-session")



io.sockets.on('connection', function (socket) {


  // if (socket.request.session.user && socket.request.cookies.user_sid) {

  //   console.log('authenticated user!')
  // }

  //  if (req.session.user && req.cookies.user_sid) {

  // console.log(socket.handshake.headers.cookie.suspicious_token)



  Tap.isRunning().then(response =>{
    socket.emit('tap_status',response)
  })

  socket.on('stopTap', function(){
  
    Tap.stopTap().then(response =>{
      response.msg="user stopped the tap"
      socket.emit('tap_status',response)
    })
  
  })
  
  
socket.on('testApiConnection', function(){

  Tap.testConnection().then(connection_status =>{

    socket.emit('connection_status',connection_status)

  }).catch(err =>{
    socket.emit('connection_status',{success:false,message:'Network error'})
  })

  Tap.isRunning().then(response =>{

    socket.emit('tap_status',response)
  })
})


  socket.on('startTap', function(){
    Tap.testConnection().then(response =>{
      if(response.success){
        Tap.startTap().then(result =>{
          
          socket.emit('tap_status',result)
        })
      }else{
        socket.emit('tap_status',{success:false, current_status:"Tap not running", msg:'could not connect to API'})
      }
  }).catch(err =>{
    socket.emit('tap_status',{success:false, current_status:"Tap not running", msg:'could not connect to API'})
  })
})


//get system data each second
  setInterval(function () {
    systemData.getSystemData().then(systemData =>{
      for(let key in systemData){
        socket.emit(key, systemData[key])
      }
  }).catch( err =>{
    console.log(err)
  })
  
}, 1000); 

// //check api status each second
// setInterval(function () {
//   Tap.testConnection().then(connection_status =>{
//     socket.emit('connection_status',connection_status)
// })

// }, 60000); 

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = io;

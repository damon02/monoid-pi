#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const systemData = require('../modules/systemData')
const Tap = require('../modules/Tap')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '31337');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = require('socket.io')(server)


io.sockets.on('connection', function (socket) {

  socket.on('stopTap', function(){
  
    Tap.stopTap().then(result =>{
      socket.emit('tap_status_change',result)
    })
  
  })
  
  
socket.on('testApiConnection', function(){

  Tap.testConnection().then(connection_status =>{
    socket.emit('connection_status',connection_status)
  })

})


  socket.on('startTap', function(){
    Tap.startTap().then(result =>{
      socket.emit('tap_status_change',result)
    })
  
  })

    Tap.testConnection().then(body =>{

      socket.emit('connection_status',body)

    }).catch(err =>{

      socket.emit('connection_status', {success:'false', message:'Fatal error'})

    })


//get system data each second
  setInterval(function () {
    systemData.getSystemData().then(systemData =>{
      for(let key in systemData){
        socket.emit(key, systemData[key])
      }
  })
  
}, 1000); 

// //check api status each second
// setInterval(function () {
//   Tap.testConnection().then(connection_status =>{
//     socket.emit('connection_status',connection_status)
// })

// }, 60000); 

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = io;

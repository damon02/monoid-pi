extends layout


block content
  container
    nav(class='navbar fixed-top navbar-dark bg-dark')
      span(class='navbar-brand mb-0 h1') Dashboard
      span(class="navbar-text navbar-right") signed in as #{username}
    br
  container
    .row
      .col-2
        h2 User
        form(method='POST' action='/updateUsername')
          div.form-group
            input.form-control(type='text' id='username' placeholder='username' value=username name='username' required autocomplete="off")
            button.btn.btn-primary(type='submit') update username
        form(method='POST' action='/updateApiToken')
          div.form-group
            input.form-control(type='text' id='apiToken' placeholder='API token' value=token name='apiToken' required autocomplete="off")        
            button.btn.btn-primary(type='submit') update api token
        form(method='POST' action='/updatePassword')
          div.form-group
            input.form-control(type='password' id='password' placeholder='Current password' name='password' required autocomplete="off")
          div.form-group
            input.form-control(type='password' id='password_new' placeholder='New password' name='password_new' required autocomplete="off")
            small(class="form-text text-muted") The password must be at least 10 characters long.
            small(class="form-text text-muted") The password must contain at least one uppercase letter.
            small(class="form-text text-muted") The password must contain at least one number.
            small(class="form-text text-muted") The password must contain at least one special character.
          div.form-group
            input.form-control(type='password' id='password_new_verify' placeholder='Verify new password' name='password_new_verify' required autocomplete="off")

            button.btn.btn-primary(type='submit') Change password

      .col-4
        h2 System
        .row-justify-content-center
          h4 Time
          div
            h2(style="display: inline-block" id='sys_time') 0

            hr
            .row
              .col
                h4 CPU usage
                div
                  h2(style="display: inline-block" id='cpu_usage') -
                  h4(style="display: inline-block") %
              .col
                h4 CPU temp
                div
                  h2(style="display: inline-block" id='cpu_temp') -
                  h4(style="display: inline-block") &#8451;
            hr
            .row
              .col
                h4 SD usage
                  div
                    h2(style="display: inline-block" id='sd_usage') -
                    h4(style="display: inline-block") %
              .col
                h4 RAM usage
                div
                  h2(style="display: inline-block" id='ram_usage') -
                  h4(style="display: inline-block") %
            hr
            .row-justify-content-center
              h3 Network
                div
                  h4= "monitor"
                  div(id='mon_nic')

                hr
                div
                  h4= "bridge"
                  div(id='br_nic')

      .col
        h2 Status

        .row-justify-content-center
          h4 API
          div
            div(id='connection_status' class="btn btn-dark disabled" style="cursor:default")
              span(id='connection_status') not tested
          button.btn.btn-default(onClick='testApiConnection()') ⇄
        br
        .row-justify-content-center
          h4 Tap
          div
            div(class="btn btn-dark disabled" style="cursor:default")
              span(id='current_tap_status') not running
          button.btn.btn-success(disabled=true id='start_tap') ▷
          button.btn.btn-danger(id='stop_tap' onClick='stopTap()') X
        br






  script.
    const socket = io();


    function testApiConnection(){
        document.getElementById('connection_status').innerHTML = "checking..."
        socket.emit('testApiConnection');
    }


    function startTap(){

        socket.emit('startTap');
    }

    function stopTap(){
        socket.emit('stopTap');
    }

    socket.on('tap_status_change', function(status){

      document.getElementById('current_tap_status').innerHTML = status
    })



    socket.on('datetime', function(sys_time) {document.getElementById('sys_time').innerHTML = sys_time});

    socket.on('cpu_usage', function(cpu_data) {document.getElementById('cpu_usage').innerHTML = cpu_data});

    socket.on('filesys', function(sd_data) {document.getElementById('sd_usage').innerHTML = sd_data});

    socket.on('ram_usage', function(ram_data) {document.getElementById('ram_usage').innerHTML = ram_data});

    socket.on('cpu_temp', function(cpu_temp) {document.getElementById('cpu_temp').innerHTML = cpu_temp});

    

    socket.on('connection_status', function(connection_status) {
      if(connection_status.success === false){
        if(connection_status.message.message){
        document.getElementById('connection_status').innerHTML = "<span class='offlineText'>"+connection_status.message.message+"</span>"
        }else{
            document.getElementById('connection_status').innerHTML = "<span class='offlineText'>"+connection_status.message+"</span>"
        }
      }else{
        document.getElementById('start_tap').disabled = false
        document.getElementById('start_tap').onclick = function() {startTap()};

        document.getElementById('connection_status').innerHTML = "<span class='onlineText'>API connected</span>"
      }
      
      
      });


    //Kei experimenteel
    socket.on('nic', function(nic_data) {
      for(let nic in nic_data){
          let status = nic_data[nic].status
          if(status.includes('up')){
            document.getElementById(nic).innerHTML = '<div class="btn btn-success disabled" style="cursor:default;">'+status+'</div>'
          }else{
            document.getElementById(nic).innerHTML = '<div class="btn btn-danger disabled" style="cursor:default;">'+status+'</div>'
            }
          }
      });
